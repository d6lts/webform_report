<?php
/* $Id$ */

/**
 * This module creates a new node type called webform report that allows users to create
 * simple, dynamic reports based on data collected by the webform module by Pontius Ullgren.
 * The webform_report module requires the webform module and will disable itself if webform
 * is not enabled.
 *
 * The development of this module is sponsored by Communications Research Centre Canada (CRC),
 * an agency of Industry Canada.
 *
 * @author Kristian Lance <kristian.lance@crc.ca>
 * @package module_webform_reports
 * @copyright Kristian Lance 2007
 *
 */

/**
 * Implementation of hook_help
 */
function webform_report_help($section='') {
  $output = '';

  switch ($section) {
    case "admin/modules#description":
      $output = t("Allows users to create reports from webform data. <b>Requires webform module</b>, and accents module (optional) for sorting accented characters.");
      break;
    case 'node/add#webform_report' :
      $output= t("A webform report is a dynamic page that contains webform data. The data can be sorted by a particular field, and fields can be included/excluded from the report as needed.");
      break;
  }

  return $output;
}

/**
 * Implementation of hook_perm
 */
function webform_report_perm() {

  return array('access webform reports', 'create webform reports', 'edit webform reports', 'edit own webform reports');

}

/**
 * Implementation of hook_access
 */
function webform_report_access($op, $node) {
  global $user;

  switch ($op) {
    case "view":
      // don't allow module to override permissions that restrict viewing of webform results
      if(user_access("access webform results") && user_access("access webform reports")) {
        return TRUE;
      }
    case "create":
      return user_access("create webform reports");
      break;
    case "update":
    case "delete":
      if ((user_access("edit own webform reports") && ($user->uid == $node->uid)) ||
        (user_access("edit webform reports"))) {
        return TRUE;
      }
      break;
  }
}

/**
 * Implementation of hook_init()
 */
function webform_report_init($log = TRUE) {
  // if the webform module is not enabled, disable webform report to prevent errors
  if (!module_exist("webform")) {
    db_query ("UPDATE {system} SET status = '0' WHERE type = 'module' AND name = 'webform_report'");
    if ($log) {
      watchdog('webform_report', 'The module has been disabled due to a dependency failure. The webform module does not exist or is not enabled.', WATCHDOG_NOTICE);
    }
  }
}

/**
 * Implementation of hook_menu()
 */
function webform_report_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array('path' => 'node/add/webform_report', 'title' => t('webform report'),
      'access' => user_access('create webform reports'));
    
    // Webform reports listing 
    $items[] = array('path' => 'admin/webform_report', 'title' => t('webform report'),
      'callback' => '_webform_report_page',
      'access' => user_access('access webform reports'),
      'type' => MENU_NORMAL_ITEM);
  }
  return $items;
}

/**
 * Implementation of hook_node_info().
 */
function webform_report_node_info() {
  return array('webform_report' => array('name' => t('webform report'), 'base' => 'webform_report'));
}

/**
 * Implementation of hook_load
 */
function webform_report_load($node) {
  $webform_report = NULL;
  if(!isset($_POST['edit'])) {
    $result = db_query("SELECT r.nid, r.wnid, r.cid, c.name, r.kcid, r.description, r.sort FROM {webform_report} r, {webform_component} c WHERE (r.cid = c.cid AND r.nid = '$node->nid') ORDER BY c.weight");
    
    if (db_num_rows($result) > 0) {
      while ($row = db_fetch_object($result)) {
        if (!isset($webform_report->wnid)) {
          $webform_report->wnid = $row->wnid;
        }
        if (!isset($webform_report->kcid)) {
          $webform_report->kcid = $row->kcid;
        }
        if (!isset($webform_report->sort_order)) {
          $webform_report->sort_order = $row->sort;
        }
        if (!isset($webform_report->description)) {
          $webform_report->description = $row->description;
        }
        $webform_report->components[] = $row->cid;
      }
    }
    else {
      webform_report_prepare($node);
    }
  }
  else {
    $webform_report->wnid = $_POST['edit']['wnid'];
    $webform_report->kcid = $_POST['edit']['kcid'];
    $webform_report->sort_order = $_POST['edit']['sort_order'];
    $webform_report->description = $_POST['edit']['description'];
    $webform_report->components = $_POST['edit']['components'];
  }

  return $webform_report;
}

/**
 * Implementation of hook_prepare
 */
function webform_report_prepare(&$node) {
  if (!isset($node->wnid)) {
    $node->wnid = $_POST['edit']['wnid'];
  }
  if (!isset($node->kcid)) { 
    $node->kcid = $_POST['edit']['kcid'];
  }
  if (!isset($node->kcid)) { 
    $node->sort_order = $_POST['edit']['sort_order'];
  }
  if (!isset($node->description)) {
    $node->description = $_POST['edit']['description'];
  }
  if (!isset($node->components)) {
    $node->components = $_POST['edit']['components'];
  }
}

/**
 * Implementation of hook_view
 */
function webform_report_view(&$node, $teaser = 0, $page = 0) {
  $output = "";

  if (arg(0) == "comment" || $teaser) {
    // Do not render the form for comments or on teasers
    return;
  }

  webform_report_prepare($node); // load form data to the node object
  $output = _webform_report_get_body_content(_webform_report_get_data($node->kcid, $node->components), $node);
  $node->body = check_markup($node->body, $node->format, FALSE);
  $node->body .= "<p>" . $node->description . "</p>";
  $node->body .= $output;
}

/**
 * Implementation of hook_validate
 */
function webform_report_validate(&$node) {
  $op = $_POST['op'];
  
  switch ($op) {
    // Intercept these buttons and redirect:
    case t('Submit'):
    case t('Preview'):
    case t(' Next > '):
      $errors = form_get_errors();
      if (empty($errors)) {
        if ($_POST['edit']['wnid'] == 0) {
          form_set_error('wnid', t('You must select a form'));
        } else {
          if ($_POST['edit']['kcid'] == 0) {
            form_set_error('kcid', t('You must select a field'));
          } else {
            if ($_POST['edit']['components'] == 0) {
              form_set_error('components', t('You must select at least one field'));
            }
          }        
        }
      }
      break;
  }
}

/**
 * Implementation of hook_insert
 */
function webform_report_insert($node, $log = TRUE) {
  webform_report_prepare($node);
  foreach ($node->components as $cid) {
    if($cid != 0) {
      db_query("INSERT INTO {webform_report} (nid, wnid, cid, kcid, description, sort) VALUES ('$node->nid', '$node->wnid', '$cid', '$node->kcid', '".addslashes($node->description)."', '$node->sort_order')");
    } 
  }
  if ($log) {
    watchdog('webform_report', 'webform report "'.$node->title.'" added', WATCHDOG_NOTICE);
  }
}

/**
 * Implementation of hook_update
 */
function webform_report_update($node, $log = TRUE) {
  webform_report_delete($node, FALSE);
  webform_report_insert($node, FALSE);
  if ($log) {
    watchdog('webform_report', 'webform report "'.$node->title.'" updated', WATCHDOG_NOTICE);
  }
}

/**
 * Implementation of hook_delete
 */
function webform_report_delete($node, $log = TRUE) {
  db_query ("DELETE FROM {webform_report} WHERE nid = '$node->nid'");
  if ($log) {
    watchdog('webform_report', 'webform report "'.$node->title.'" deleted', WATCHDOG_NOTICE);
  }
}

/**
 * Implementation of hook_form
 */
function webform_report_form(&$node) {
  $form['webform_report'] = array(
    '#type' => 'fieldset',
    '#title' => t('Webform Report'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => -3);
  $form['webform_report']['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#required' => TRUE,
    '#default_value' => t($node->title),
    '#weight' => -2,
    '#description' => t('Enter a title for your webform report page')
  );

  if($_POST['edit']['description']) {
    $value = $_POST['edit']['description'];
  }
  else {
    $value = $node->description;
  }
  $form['webform_report']['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#description' => t('The description will be displayed at the top of the report page'),
    '#value' => t($value),
    '#required' => FALSE,
    '#weight' => -1,
  );

  if (isset($node->wnid)) {
    $default = $node->wnid;
  }
  else {
    $default = t("Select a webform");
  }
  $options = _webform_report_get_webforms(t("Select a webform"));
  $form['webform_report']['wnid'] = array(
    '#type' => 'select',
    '#title' => t("Webform"),
    '#default_value' => $default,
    '#options' => $options,
    '#attributes' => array('onchange' => 'this.form.submit()'),
    '#weight' => 0,
  );
  unset($webform_node, $default, $options);

  if (isset($node->wnid) && $node->wnid != 0) {
    if (isset($node->kcid)) {
      $default = $node->kcid;
    }
    else {
      $default = t("Select a field");
    }
    $options = _webform_report_get_components($node->wnid, t("Select a field"));
    $form['webform_report']['kcid'] = array(
      '#type' => 'select',
      '#title' => t("Key field"),
      '#default_value' => $default,
      '#options' => $options,
      '#attributes' => array('onchange' => 'this.form.submit()'),
      '#weight' => 1,
    );
    unset($default, $options);

    $options = array(SORT_ASC => t('Ascending'), SORT_DESC => t('Descending'));
    $form['webform_report']['sort_order'] = array(
      '#type' => 'select',
      '#title' => t("Sort order"),
      '#options' => $options,
      '#default_value' => $node->sort_order,
      '#weight' => 2,
    );
  }

  if (isset($node->kcid) && $node->kcid != 0) {
    $options = _webform_report_get_components($node->wnid);
    $form['webform_report']['components'] = array(
      '#type' => 'checkboxes',
      '#title' => t("Include components"),
      '#description' => t('Select all of the components to include in this report and click Preview to display the results'),
      '#options' => $options,
      '#default_value' => $node->components,
      '#weight' => 2,
    );
  }

  if (!isset($node->kcid) || $node->kcid == 0) {
    $form['webform_report']['next'] = array(
      '#type' => 'submit',
      '#value' => t(' Next > '),
      '#weight' => 4,
    );
  }
  return $form;
}

/**
 * Searches for nodes of type webform and returns their nids and titles
 * in an associative array
 */
function _webform_report_get_webforms($first = NULL) {
  $result = db_query("SELECT nid FROM {node} WHERE type = 'webform'");

  $webforms = array(0 => $first);
  while ($row = db_fetch_object($result)) {
    $webform_report = node_load($row->nid); // load the current version of this node
    $webforms[$webform_report->nid] = t($webform_report->title);
  }
  return $webforms;
} // end function _webform_report_get_webforms()

/**
 * Get webform components
 *
 * @param nid is the node id of a webform
 * @param default (optional) is the first item in the returned array,
 *   for use with form components
 * @return an associative array of webform components
 */
function _webform_report_get_components($nid, $default = NULL) {
  if (isset($default)) {
    $components = array($default);
  }
  else {
    $components = array();
  }
  
  $result = db_query("SELECT c.cid, c.name, c.type FROM {webform_component} c WHERE c.type <> 'fieldset' AND c.nid = '$nid' ORDER BY c.cid");
  
  while ($row = db_fetch_object($result)) {
    $component_name = substr($row->name, 0, 65);
    if (strlen($row->name) > 65) {
      $component_name .= "...";
    }
    $components[$row->cid] = t($component_name);
  }
  
  return $components;
}


/**
 * Get submitted data for the specified webform
 *
 * @param kcid is a numeric key field identifier
 * @param components is an array of fields to include in the report
 * @return a database query result set
 */
function _webform_report_get_data($kcid, $components) {
  $result = NULL;
  if (is_array($components) and count($components) > 0) {  
    // build a subquery for the specified components
    $query = "c.cid = '";
    $count = 0;
    foreach ($components as $component) {
      $query .= $component;
      if ($count < count($components) - 1) {
        $query .= "' OR c.cid = '";
      }
      $count++;
    }
    $query .= "'";
  
    $result = db_query("SELECT c.name, c.cid, d.sid, d.data FROM {webform_submitted_data} d, {webform_component} c, {webform_submissions} s WHERE d.cid = c.cid AND d.sid = s.sid AND (" . $query . ") ORDER BY d.sid, c.cid, c.name, d.data");
  }
  return $result;  
}

/**
 * Get node body content for the specified webform report
 *
 * @param data is a database query result set
 * @param node is the current node object
 * @return a string of text or a themed table
 */
function _webform_report_get_body_content($data, $node) {

  if (db_num_rows($data) > 0) {
    $fields = array(); // webform field names
    $values = array(); // webform field values
    $last_value = 0;
    
    // create an array where the key is the webform field name
    $count = 0;
    $base_style = "padding: 0px 10px 0px 0px; vertical-align: top;";

    while ($row = db_fetch_object($data)) {
      if (!isset($fields[$row->cid])) {
        $fields[$row->cid] = array('data' => $row->name, 'field' => $row->cid, 'sort' => $_GET['sort']);
      }
      if ($row->data != '0') { // checkbox not selected
        if ($last_value != '0') { // checkbox not selected
          $values[$row->sid][$row->cid] .= ", ";
        }
        $values[$row->sid][$row->cid] = array('data' => $row->data, 'style' => $base_style);
      }
      // override the report's key field with the table sort column, if applicable
      if (isset($_GET['order'])) {
        if ($_GET['order'] == $row->name && $node->kcid != $row->cid) {
          $node->kcid = $row->cid;
        }
      }
      elseif ($node->kcid == $row->cid) { // no table sort link has been clicked yet
        $_GET['order'] = $row->name; // make the sort arrow marker appear in the table column header
      }

      $last_cid = $row->cid;
      $last_value = $row->data;
    }

    reset($fields); // top

    // make the key column the first one in the table if not already so
    if (isset($node->kcid) && key($fields) != $node->kcid) {

      // put the key column first
      $tmpField = $fields[key($fields)];
      $fields[key($fields)] = $fields[$node->kcid];
      $fields[$node->kcid] = $tmpField;
      unset($tmpField);

      // put the values of the key column first
      foreach ($values as $key => $value) {
        $tmpValue = $values[$key][key($fields)];
        $values[$key][key($fields)] = $values[$key][$node->kcid];
        $values[$key][$node->kcid] = $tmpValue;
      }
      unset($tmpValue);

      $node->kcid = key($fields); // make the new column the key column
    }

    // get an a array of columns for sorting
    $column = array();
    foreach ($fields as $key1 => $field) {
      foreach ($values as $key2 => $value) {
        // make sort order case-insensitive and remove spaces (and accents if accents module installed)
        if (module_exist("accents")) {
          $column[$key1][$key2] = trim(strtolower(accents_search_preprocess($value[$key1]['data'])));
        }
        else {
          $column[$key1][$key2] = trim(strtolower($value[$key1]['data']));
        }      
      }
    }

    // override the report's sort order with the table sort order, if applicable
    if (isset($_GET['sort'])) { 
      switch ($_GET['sort']) {
        case "asc":
          $node->sort_order = SORT_ASC;
          break;
        case "desc":
          $node->sort_order = SORT_DESC;
          break;
      }
    }
    else { // override the table's sort order with the report's
      if ($node->sort_order == SORT_ASC) {
        $_GET['sort'] = 'asc'; // default table sort will be ascending
      }
      else {
        $_GET['sort'] = 'desc'; // default table sort will be descending
      }
    }

    // sort the columns and their contents according to specified criteria
    array_multisort($column[$node->kcid], (int)$node->sort_order, $values);        
    
    // break the array into chunks for pagination 
    $pages = array_chunk($values, 20, TRUE); 
    
    $output .= _webform_report_pager($fields, $pages);
  }
  else { // no submitted data
    $output = t("Note: There are no submissions for the selected webform.</b> Either the form
       has not yet been completed by anyone, or the results have been cleared. This will not
       prevent you from creating this report, but this message will be displayed on the report
       page until someone submits the selected webform.");
  }
  return $output;
}

/**
 * Display a list of webform reports
 * @return a themed table
 */
function _webform_report_page() {
  $output = NULL;
  if (user_access("access webform reports")) {
    $header = array(
                    t('Title'), 
                    array('data' => t('View'),
                          'colspan' => '4')
                    );

    $result = db_query("SELECT nid, title FROM {node} WHERE type='webform_report'");
   
    while ($node = db_fetch_object($result)) {
      $rows[] = array(l($node->title,'node/' . $node->nid),
                    l(t('edit'), 'node/'.$node->nid.'/edit'));

    }
  
    $output = theme('table', $header, $rows);
    drupal_set_title($node->title);
  }
  return $output;
}

/**
 * Paginate the webform report
 * @return a themed table with page links
 */
function _webform_report_pager($fields, $pages) {
  if(!$_GET['page']) {
    $_GET['page'] = '1';
  }
  $output = theme_table($fields, $pages[($_GET['page'] - 1)]);
  $output .= '<div id="pager">';
  if($_GET['page'] > 1) {
    $output .= '<a class="pager-first active" title="' . t('Go to first page') . '" href="?page=1">' . t('« first') .'</a>';
    $output .= '<a class="pager-first active" title="' . t('Go to previous page') . '" href="?page=' . ($_GET['page'] - 1) . '">' . t('« previous') .'</a>';
  }
  $output .= '<span class="pager-list">';
  foreach($pages as $key => $page) {
    switch($_GET['page']) {
      case($key + 1):
        $output .= '<strong class="pager-current">' . ($key + 1) . '</strong>';
        break;
      case(1):
        $output .= '<a class="pager-first active" href="?page=' .($key + 1) . '">' . ($key + 1) . '</a>';
        break;
      case(count($pages)):
        $output .= '<a class="pager-last active" href="?page=' .($key + 1) . '">' . ($key + 1) . '</a>';
        break;
      default:
        $output .= '<a class="pager-next active" href="?page=' .($key + 1) . '">' . ($key + 1) . '</a>';
        break;
    }
  }
  $output .= '</span>';
  if($_GET['page'] < count($pages)) {
    $output .= '<a class="pager-last active" title="' . t('Go to next page') . '" href="?page=' . ($_GET['page'] + 1) . '">' . t('next ›') .'</a>';
    $output .= '<a class="pager-last active" title="' . t('Go to last page') . '" href="?page=' . count($pages) . '">' . t('last »') .'</a>';
  }
  $output .= '</div>';
  return $output;
}