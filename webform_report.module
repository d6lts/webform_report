<?php
/* $Id$ */

/**
 * This module allows users to create simple, dynamic reports based on data collected
 * by the webform module. It adds a new node type that contains the report criteria,
 * and the data displayed is updated automatically as webforms are submitted. The data
 * can be sorted according to the viewer's preference without altering the report criteria.
 *
 * The module is written by Kristian Lance with and sponsored by Communications Research Centre
 * Canada (CRC), an agency of Industry Canada.
 *
 */

/**
 * Implementation of hook_help
 */
function webform_report_help($section='') {
  $output = '';

  switch ($section) {
    case "admin/modules#description":
      $output = t("Allows users to create reports from Webform data. <b>Requires webform module</b>, and accents module (optional) for sorting accented characters.");
      break;
    case 'node/add#webform_report' :
      $output= t("A Webform report is a dynamic page that contains Webform data. The data can be sorted by a particular field, and fields can be included/excluded from the report as needed.");
      break;
  }

  return $output;
}

/**
 * Implementation of hook_perm
 */
function webform_report_perm() {

  return array('access webform reports', 'create webform reports', 'edit webform reports', 'edit own webform reports');

}

/**
 * Implementation of hook_access
 */
function webform_report_access($op, $node) {
  global $user;

  switch ($op) {
    case "view":
      // don't allow module to override permissions that restrict viewing of webform results
      if(user_access("access webform results") && user_access("access webform reports")) {
        return TRUE;
      }
    case "create":
      return user_access("create webform reports");
      break;
    case "update":
    case "delete":
      if ((user_access("edit own webform reports") && ($user->uid == $node->uid)) ||
        (user_access("edit webform reports"))) {
        return TRUE;
      }
      break;
  }
}

/**
* Implementation of hook_db_rewrite_sql().
*/
function webform_report_db_rewrite_sql($query, $primary_table, $primary_field, $args) {
  switch ($primary_field) {
    case 'nid':
      // this query deals with node objects
      $return = array();
      if (!user_access('access webform reports')) {
        if ($primary_table != 'n') {
          $return['join'] = "LEFT JOIN {node} n ON $primary_table.nid = n.nid";
        }
        $return['where'] = "n.type <> 'webform_report'";
        return $return;
      }
      break;
    case 'tid':
      // this query deals with taxonomy objects
      break;
    case 'vid':
      // this query deals with vocabulary objects
      break;
  }
}

/**
 * Implementation of hook_menu()
 */
function webform_report_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    // Webform reports listing 
    $items[] = array('path' => 'admin/content/webform_report',
      'title' => t('Webform reports'),
      'callback' => '_webform_report_page',
      'access' => user_access('access webform reports'),
      'description' => t('View and edit Webform reports.'),      
      'type' => MENU_NORMAL_ITEM);
  }
  return $items;
}

/**
 * Implementation of hook_node_info().
 */
function webform_report_node_info() {
  return array(
    'webform_report' => array(
      'name' => t('Webform report'),
      'module' => 'webform_report',
      'description' => t('A webform report is a dynamic page that contains user-specified data
      collected by the Webform module. The data can be sorted by a particular field, and fields can
      be included/excluded as needed.')
    )
  );
}

/**
 * Implementation of hook_load
 */
function webform_report_load($node) {
  $webform_report = NULL;
  if(!isset($_POST['wnid'])) {
    $result = db_query("SELECT r.nid, r.wnid, rc.cid, c.name, r.kcid, r.description, r.sort, r.options FROM {webform_report} r LEFT JOIN {webform_report_component} rc ON r.nid = rc.nid LEFT JOIN {webform_component} c ON rc.cid = c.cid WHERE rc.nid = '$node->nid' ORDER BY c.weight");

    if (db_num_rows($result) > 0) {
      while ($row = db_fetch_object($result)) {
        // check if variables are already set so we don't set them twice
        if (!isset($webform_report->wnid)) {
          $webform_report->wnid = $row->wnid;
        }
        if (!isset($webform_report->kcid)) {
          $webform_report->kcid = $row->kcid;
        }
        if (!isset($webform_report->sort_order)) {
          $webform_report->sort_order = $row->sort;
        }
        if (!isset($webform_report->filter_type)) {
          $webform_report->filter_type = $row->filter_type;
        }
        if (!isset($webform_report->filter_value)) {
          $webform_report->filter_value = $row->filter_value;
        }
        if (!isset($webform_report->description)) {
          $webform_report->description = $row->description;
        }
        // this array will be appended multiple times, so no pre-existence check
        $webform_report->components[] = $row->cid;
        if (!isset($webform_report->options)) {
          $webform_report->options = unserialize($row->options);
          // results per page, show submitted, show user, show ip
        }
      }
    }
    else {
      webform_report_prepare($node);
    }
  }
  else {
    $webform_report->wnid = $_POST['wnid'];
    $webform_report->kcid = $_POST['kcid'];
    $webform_report->sort_order = $_POST['sort_order'];
    $webform_report->filter_type = $_POST['filter_type'];
    $webform_report->filter_value = $_POST['filter_value'];
    $webform_report->description = $_POST['description'];
    $webform_report->components = $_POST['components'];
    $webform_report->options = $_POST['options'];
  }

  return $webform_report;
}

/**
 * Implementation of hook_prepare
 */
function webform_report_prepare(&$node) {
  if (!isset($node->wnid)) {
    $node->wnid = $_POST['wnid'];
  }
  if (!isset($node->kcid)) { 
    $node->kcid = $_POST['kcid'];
  }
  if (!isset($node->kcid)) { 
    $node->sort_order = $_POST['sort_order'];
  }
  if (!isset($node->filter_type)) { 
    $node->filter_type = $_POST['filter_type'];
  }
  if (!isset($node->filter_value)) { 
    $node->filter_value = $_POST['filter_value'];
  }
  if (!isset($node->description)) {
    $node->description = $_POST['description'];
  }
  if (!isset($node->components)) {
    $node->components = $_POST['components'];
  }
  if (!isset($node->options)) {
    $node->options['results_per_page'] = $_POST['results_per_page'];
    $node->options['show_submitted'] = $_POST['show_submitted'];
    $node->options['show_user'] = $_POST['show_user'];
    $node->options['show_ip'] = $_POST['show_ip'];
  }
}

/**
 * Implementation of hook_view
 */
function webform_report_view($node, $teaser = 0, $page = 0) {
  if (arg(0) == "comment" || $teaser) {
    // Do not render the form for comments or on teasers
    return;
  }

  $output = "<p>" . $node->description . "</p>";
  $output .= _webform_report_get_body_content(_webform_report_get_data($node), $node);
  $node->content['body'] = array('#value' => check_markup($node->body, $node->format, FALSE));
  $node->content['webform_report'] = array('#value' => $output, '#weight' => 10);
  return $node;
}

/**
 * Implementation of hook_validate
 */
function webform_report_validate(&$node) {
  $op = $form_values['op'];
  
  switch ($op) {
    // Intercept these buttons and redirect:
    case t('Submit'):
    case t('Preview'):
    case t(' Next > '):
      $errors = form_get_errors();
      if (empty($errors)) {
        if ($_POST['wnid'] == 0) {
          form_set_error('wnid', t('You must select a form'));
        } else {
          if ($_POST['kcid'] == 0) {
            form_set_error('kcid', t('You must select a field'));
          } else {
            if($_POST['filter_type'] == 0 && $_POST['filter_value'] == '') {
              form_set_error('filter_value', t('You must specify a filter value'));
            } else {
              if ($_POST['components'] == '') {
                form_set_error('components', t('You must select at least one component  '));
              }
            }
          }        
        }
      }
      break;
  }
}

/**
 * Implementation of hook_insert
 */
function webform_report_insert($node, $log = TRUE) {
  webform_report_prepare($node);
  db_query("INSERT INTO {webform_report} (nid, wnid, kcid, description, sort, options) VALUES (%d, %d, %d, '%s', %d, '%s')", $node->nid, $node->wnid, $node->kcid, addslashes($node->description), $node->sort_order, serialize($node->options));
  foreach ($node->components as $cid) {
    if($cid != 0) { // omit unselected components
      db_query("INSERT INTO {webform_report_component} (nid, cid) VALUES ('$node->nid', '$cid')");
    } 
  }
  if ($log) {
    watchdog('webform_report', 'Webform report "'.$node->title.'" added', WATCHDOG_NOTICE);
  }
}

/**
 * Implementation of hook_update
 */
function webform_report_update($node, $log = TRUE) {
  webform_report_delete($node, FALSE);
  webform_report_insert($node, FALSE);
  if ($log) {
    watchdog('webform_report', 'Webform report "'.$node->title.'" updated', WATCHDOG_NOTICE);
  }
}

/**
 * Implementation of hook_delete
 */
function webform_report_delete($node, $log = TRUE) {
  db_query ("DELETE FROM {webform_report} WHERE nid = '$node->nid'");
  db_query ("DELETE FROM {webform_report_component} WHERE nid = '$node->nid'");
  if ($log) {
    watchdog('webform_report', 'Webform report "'.$node->title.'" deleted', WATCHDOG_NOTICE);
  }
}

/**
 * Implementation of hook_form
 */
function webform_report_form(&$node) {
  $form['webform_report'] = array(
    '#type' => 'fieldset',
    '#title' => t('Webform report'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => -3);
  $form['webform_report']['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#required' => TRUE,
    '#default_value' => t($node->title),
    '#weight' => -2,
    '#description' => t('Enter a title for your Webform report page')
  );

  if($_POST['description']) {
    $value = $_POST['description'];
  }
  else {
    $value = $node->description;
  }
  $form['webform_report']['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#description' => t('The description will be displayed at the top of the report page'),
    '#value' => t($value),
    '#required' => FALSE,
    '#weight' => -1,
  );

  if (isset($node->wnid)) {
    $default = $node->wnid;
  }
  else {
    $default = t("Select a webform");
  }
  $options = _webform_report_get_webforms(t("Select a webform"));
  $form['webform_report']['wnid'] = array(
    '#type' => 'select',
    '#title' => t("Webform"),
    '#default_value' => $default,
    '#options' => $options,
    '#attributes' => array('onchange' => 'this.form.submit()'),
    '#required' => TRUE,
    '#weight' => 0,
  );
  unset($default, $options);

  if (isset($node->wnid) && $node->wnid != 0) {
    if (isset($node->kcid)) {
      $default = $node->kcid;
    }
    else {
      $default = t("Select a field");
    }
    $options = _webform_report_get_components($node->wnid, t("Select a field"));
    $form['webform_report']['kcid'] = array(
      '#type' => 'select',
      '#title' => t("Key field"),
      '#default_value' => $default,
      '#options' => $options,
      '#attributes' => array('onchange' => 'this.form.submit()'),
      '#required' => TRUE,
      '#weight' => 1,
    );
    unset($default, $options);

    $options = array(SORT_ASC => t('Ascending'), SORT_DESC => t('Descending'));
    $form['webform_report']['sort_order'] = array(
      '#type' => 'select',
      '#title' => t("Sort order"),
      '#options' => $options,
      '#default_value' => $node->sort_order,
      '#weight' => 2,
    );
  }
  unset($default, $options);

  if (isset($node->kcid) && $node->kcid != 0) {
    $options = array(0 => t('none'), 1 => t('begins with'), 2 => t('contains'));
    $form['webform_report']['filter_type'] = array(
      '#type' => 'select',
      '#title' => t("Filter Type"),
      '#options' => $options,
      '#attributes' => array('onchange' => 'this.form.submit()'),
      '#default_value' => $node->filter_type,
      '#weight' => 3,
    );
  }
  unset($options);

  if (isset($node->kcid) && $node->kcid != 0 && $node->filter_type != 0) {
    if($node->filter_type == 0) {
      $required = FALSE;
    } else {
      $required = TRUE;
    }
    $form['webform_report']['filter_value'] = array(
      '#type' => 'textfield',
      '#title' => t('Filter Value'),
      '#description' => t('Filter the key column using the specified value'),
      '#default_value' => t($node->filter_value),
      '#required' => $required,
      '#weight' => 4
    );
  }

  if (isset($node->kcid) && $node->kcid != 0) {
    $options = _webform_report_get_components($node->wnid);
    $form['webform_report']['components'] = array(
      '#type' => 'checkboxes',
      '#title' => t("Include components"),
      '#description' => t('Select all of the components to include in this report and click Preview to display the results'),
      '#options' => $options,
      '#default_value' => $node->components,
      '#required' => TRUE,
      '#weight' => 5,
    );
  }
  unset($options);

  if (isset($node->kcid) && $node->kcid != 0) {
    $options = array('show_submitted' => 'Show date/time submitted', 'show_user' => 'Show user', 'show_ip' => 'Show IP');
    $form['webform_report']['options'] = array(
      '#type' => 'checkboxes',
      '#title' => t("Display options"),
      '#description' => t('Select display options for this report and click Preview to display the results'),
      '#options' => $options,
      '#default_value' => $node->options,
      '#required' => FALSE,
      '#weight' => 6,
    );
  }
  unset($options);

  if (isset($node->kcid) && $node->kcid != 0) {
    if (isset($node->results_per_page)) {
      $default = $node->results_per_page;
    }
    else {
      $default = 25;
    }
    $options = array(25 => '25', 50 => '50', 75 => '75', 100 => '100');
    $form['webform_report']['results_per_page'] = array(
      '#type' => 'select',
      '#title' => t("Results per page"),
      '#options' => $options,
      '#default_value' => $default,
      '#weight' => 7,
    );
  }
  unset($options, $default);

  if (!isset($node->kcid) || $node->kcid == 0) {
    $form['webform_report']['next'] = array(
      '#type' => 'button',
      '#value' => t(' Next > '),
      '#weight' => 8,
      '#attributes' => array('onclick' => 'this.form.submit()'),      
    );
  }

  return $form;
}

/**
 * Searches for nodes of type webform and returns their nids and titles
 * in an associative array
 */
function _webform_report_get_webforms($first = NULL) {
  $result = db_query("SELECT nid FROM {node} WHERE type = 'webform'");

  $webforms = array(0 => $first);
  while ($row = db_fetch_object($result)) {
    $webform_report = node_load($row->nid); // load the current version of this node
    $webforms[$webform_report->nid] = t($webform_report->title);
  }
  return $webforms;
} // end function _webform_report_get_webforms()

/**
 * Get webform components
 *
 * @param nid is the node id of a webform
 * @param default (optional) is the first item in the returned array,
 *   for use with form components
 * @return an associative array of webform components
 */
function _webform_report_get_components($nid, $default = NULL) {
  if (isset($default)) {
    $components = array($default);
  }
  else {
    $components = array();
  }
  
  $result = db_query("SELECT c.cid, c.name FROM {webform_component} c WHERE c.type <> 'fieldset' AND c.nid = '$nid' ORDER BY c.weight");
  
  while ($row = db_fetch_object($result)) {
    $component_name = substr($row->name, 0, 65);
    if (strlen($row->name) > 65) {
      $component_name .= "...";
    }
    $components[$row->cid] = t($component_name);
  }
  
  return $components;
}


/**
 * Get submitted data for the specified webform
 *
 * @param kcid is a numeric key field identifier
 * @param components is an array of fields to include in the report
 * @return a database query result set
 */
function _webform_report_get_data($node) {
  $result = NULL;
  if (is_array($node->components) and count($node->components) > 0) {  
    // build a subquery for the specified components
    $query = "c.cid = '";
    $count = 0;
    foreach ($node->components as $component) {
      $query .= $component;
      if ($count < count($node->components) - 1) {
        $query .= "' OR c.cid = '";
      }
      $count++;
    }
    $query .= "'";

    $result = db_query("SELECT c.name, c.cid, c.type, d.sid, d.data, s.user, s.uid, u.name as user, s.submitted, s.remote_addr FROM {webform_submitted_data} d LEFT JOIN {webform_component} c ON d.cid = c.cid LEFT JOIN {webform_submissions} s ON d.sid = s.sid LEFT JOIN {users} u ON s.uid = u.uid WHERE (" . $query . ") ORDER BY d.sid, c.cid, c.name, d.data");
  }
  return $result;  
}

/**
 * Get node body content for the specified webform report
 *
 * @param data is a database query result set
 * @param node is the current node object
 * @return a string of text or a themed table
 */
function _webform_report_get_body_content($data, $node) {

  if (db_num_rows($data) > 0) {
    $fields = array(); // webform field names
    $values = array(); // webform field values
    $last_value = 0;

    // create an array where the key is the webform field name
    $count = 0;

    while ($row = db_fetch_object($data)) {
      if (!isset($fields[$row->cid])) { // load fields once only
        if($node->options['show_submitted']) {
          $fields['submitted'] = array('data' => t('Submitted'), 'field' => 'submitted', 'sort' => $_GET['sort'], 'class' => 'webform_report');
        }
        if($node->options['show_user']) {
          $fields['user'] = array('data' => t('User'), 'field' => 'user', 'sort' => $_GET['sort'], 'class' => 'webform_report');
        }
        if($node->options['show_ip']) {
          $fields['show_ip'] = array('data' => t('IP Address'), 'field' => 'remote_addr', 'sort' => $_GET['sort'], 'class' => 'webform_report');
        }
        $fields[$row->cid] = array('data' => $row->name, 'field' => $row->cid, 'sort' => $_GET['sort'], 'class' => 'webform_report');
      } // end fields
      if($node->options['show_submitted']) {
        $values[$row->sid]["submitted"] = array('data' => date('Y-m-d h:m a', $row->submitted), 'class' => 'webform_report');
      }
      if($node->options['show_user']) {
        if($row->user == "") {
          $row->user = "anonymous";
        } else {
          $row->user = '<a href="' . url('user/' . $row->uid) . '">' . $row->user . '</a>';
        }
        $values[$row->sid]["user"] = array('data' => $row->user, 'class' => 'webform_report');
      }
      if($node->options['show_ip']) {
        $values[$row->sid]["remote_addr"] = array('data' => $row->remote_addr, 'class' => 'webform_report');
      }
      if ($row->data != '0') { // checkbox, not selected
        if($row->cid == $last_cid && $last_value != 0) { // will comma-separate multiple selections
          $row->data = ", " . $row->data;
        }
        if($row->type == "email") {
          $values[$row->sid][$row->cid] = array('data' => '<a href="mailto:' . $row->data . '">' . $row->data . '</a>', 'class' => 'webform_report');
        } else {
          $values[$row->sid][$row->cid] = array('data' => $row->data, 'class' => 'webform_report');
        }
      } else {
          $values[$row->sid][$row->cid] = array('data' => '&nbsp;', 'class' => 'webform_report'); // prevents the table cell from being omitted
      }

      // override the report's key field with the table sort column, if applicable
      if (isset($_GET['order'])) {
        if ($_GET['order'] == $row->name && $node->kcid != $row->cid) {
          $node->kcid = $row->cid;
        }
      }
      elseif ($node->kcid == $row->cid) { // no table sort link has been clicked yet
        $_GET['order'] = $row->name; // make the sort arrow marker appear in the table column header
      }

      $last_cid = $row->cid;
      $last_value = $row->data;
    }

    reset($fields); // top

    // get an array of columns for sorting
    $column = array();
    foreach ($fields as $key1 => $field) {
      foreach ($values as $key2 => $value) {
        // make sort order case-insensitive and remove spaces (and accents if accents module installed)
        if (module_exists("accents")) {
          $column[$key1][$key2] = trim(strtolower(accents_search_preprocess($value[$key1]['data'])));
        }
        else {
          $column[$key1][$key2] = trim(strtolower($value[$key1]['data']));
        }      
      }
    }

    // override the report's sort order with the table sort order, if applicable
    if (isset($_GET['sort'])) { 
      switch ($_GET['sort']) {
        case "asc":
          $node->sort_order = SORT_ASC;
          break;
        case "desc":
          $node->sort_order = SORT_DESC;
          break;
      }
    }
    else { // override the table's sort order with the report's
      if ($node->sort_order == SORT_ASC) {
        $_GET['sort'] = 'asc'; // default table sort will be ascending
      }
      else {
        $_GET['sort'] = 'desc'; // default table sort will be descending
      }
    }

    // sort the columns and their contents according to specified criteria
    array_multisort($column[$node->kcid], (int)$node->sort_order, $values);        

    $output .= _webform_report_pager($fields, $values, $node);
  }
  else { // no submitted data
    $output = t("Note: There are no submissions for the selected webform.</b> Either the form
       has not yet been completed by anyone, or the results have been cleared. This will not
       prevent you from creating this report, but this message will be displayed on the report
       page until someone submits the selected webform.");
  }
  return $output;
}

/**
 * Display a list of webform reports in the admin area
 * @return a themed table
 */
function _webform_report_page() {
  $output = NULL;
  if (user_access("access webform reports")) {
    $header = array(
                    t('Title'), 
                    array('data' => t('View'),
                          'colspan' => '4')
                    );

    $result = db_query("SELECT nid, title FROM {node} WHERE type='webform_report'");
   
    while ($node = db_fetch_object($result)) {
      $rows[] = array(l($node->title,'node/' . $node->nid),
                    l(t('edit'), 'node/'.$node->nid.'/edit'));

    }
  
    $output = theme('table', $header, $rows);
    drupal_set_title($node->title);
  }
  return $output;
}

/**
 * Paginate the webform report
 * @return a themed table with page links
 */
function _webform_report_pager($fields, $values, $node) {
  // for backward compatibility
  if(!$node->results_per_page) {
    $results_per_page = 25;
  } else {
    $results_per_page = $node->results_per_page;
  }
  // Add the css file for form display.
  drupal_add_css(drupal_get_path('module', 'webform_report') . '/webform_report.css');

  // break the array into chunks for pagination 
  $pages = array_chunk($values, $results_per_page, TRUE); 
  if(!$_GET['page']) {
    $_GET['page'] = '1';
  }
  $output = theme_table($fields, $pages[($_GET['page'] - 1)]);
  $output .= '<div class="pager">';
  if($_GET['page'] > 1) {
    $output .= '<a class="pager-first active" title="' . t('Go to first page') . '" href="?sort=' . $_GET['sort'] . '&order=' . $_GET['order'] . '&page=1">' . t('« first') .'</a>';
    $output .= '<a class="pager-first active" title="' . t('Go to previous page') . '" href="?sort=' . $_GET['sort'] . '&order=' . $_GET['order'] . '&page=' . ($_GET['page'] - 1) . '">' . t('‹ previous') .'</a>';
  }
  $output .= '<span class="pager-list">';
  foreach($pages as $key => $page) {
    switch($_GET['page']) {
      case($key + 1):
        $output .= '<strong class="pager-current">' . ($key + 1) . '</strong>';
        break;
      case(1):
        $output .= '<a class="pager-first active" href="?sort=' . $_GET['sort'] . '&order=' . $_GET['order'] . '&page=' .($key + 1) . '">' . ($key + 1) . '</a>';
        break;
      case(count($pages)):
        $output .= '<a class="pager-last active" href="?sort=' . $_GET['sort'] . '&order=' . $_GET['order'] . '&page=' .($key + 1) . '">' . ($key + 1) . '</a>';
        break;
      default:
        $output .= '<a class="pager-next active" href="?sort=' . $_GET['sort'] . '&order=' . $_GET['order'] . '&page=' .($key + 1) . '">' . ($key + 1) . '</a>';
        break;
    }
  }
  $output .= '</span>';
  if($_GET['page'] < count($pages)) {
    $output .= '<a class="pager-last active" title="' . t('Go to next page') . '" href="?sort=' . $_GET['sort'] . '&order=' . $_GET['order'] . '&page=' . ($_GET['page'] + 1) . '">' . t('next ›') .'</a>';
    $output .= '<a class="pager-last active" title="' . t('Go to last page') . '" href="?sort=' . $_GET['sort'] . '&order=' . $_GET['order'] . '&page=' . count($pages) . '">' . t('last »') .'</a>';
  }
  $output .= '</div>';
  return $output;
}
